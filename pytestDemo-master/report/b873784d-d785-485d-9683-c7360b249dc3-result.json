{"name": "测试数据：【 test003，False，200，账号不存在，请重新输入或联系管理员！】", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'header'", "trace": "self = <testcases.api_test.test_03_login.TestUserLogin object at 0x049602F0>, username = 'test003', except_result = False, except_code = 200, except_msg = '账号不存在，请重新输入或联系管理员！'\n\n    @allure.story(\"用例--检查登录用户\")\n    @allure.description(\"该用例是针对获取用户登录接口的测试\")\n    @allure.issue(\"http://10.5.15.116/#/home\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"暂无\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"测试数据：【 {username}，{except_result}，{except_code}，{except_msg}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"username, except_result, except_code, except_msg\",\n                             api_data[\"test_check_user\"])\n    def test_check_user(self, username, except_result, except_code, except_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n>       result = check_user(username)\n\ntestcases\\api_test\\test_03_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestcases\\api_test\\user.py:90: in check_user\n    res = user.check(data=json.dumps(payload), header=header)\napi\\user.py:40: in check\n    return self.post(\"/user/checkUsername\", **kwargs)\ncore\\rest_client.py:17: in post\n    return self.request(url, \"POST\", data, json, **kwargs)\ncore\\rest_client.py:38: in request\n    return requests.post(url, data, json, **kwargs)\nd:\\test\\flaskdemo-master\\venv\\lib\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'post', url = 'http://10.5.15.116/videt-wisdom-star/user/checkUsername', kwargs = {'data': '{\"username\": \"test003\"}', 'header': {'Content-Type': 'application/json'}, 'json': None}, session = <requests.sessions.Session object at 0x04959670>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'header'\n\nd:\\test\\flaskdemo-master\\venv\\lib\\site-packages\\requests\\api.py:61: TypeError"}, "description": "该用例是针对获取用户登录接口的测试", "attachments": [{"name": "log", "source": "4b9733aa-1ccb-4d85-92c2-014700e92abc-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "9a95a2de-f7ed-469c-b1f9-0b23fbc184d7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'test003'"}, {"name": "except_result", "value": "False"}, {"name": "except_code", "value": "200"}, {"name": "except_msg", "value": "'账号不存在，请重新输入或联系管理员！'"}], "start": 1622568312829, "stop": 1622568312832, "uuid": "6025ce0a-1807-4b03-b786-b3529a61a721", "historyId": "38b7ba371414e38be2a72df266f3c7e7", "testCaseId": "4965f76335de5c80d0580a0c1fbc27f9", "fullName": "testcases.api_test.test_03_login.TestUserLogin#test_check_user", "labels": [{"name": "feature", "value": "用户登录模块"}, {"name": "severity", "value": "normal"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "story", "value": "用例--检查登录用户"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test"}, {"name": "suite", "value": "test_03_login"}, {"name": "subSuite", "value": "TestUserLogin"}, {"name": "host", "value": "LAPTOP-1UC29CD2"}, {"name": "thread", "value": "17724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.test_03_login"}], "links": [{"type": "test_case", "url": "暂无", "name": "点击，跳转到对应用例的链接地址"}, {"type": "issue", "url": "http://10.5.15.116/#/home", "name": "点击，跳转到对应BUG的链接地址"}]}